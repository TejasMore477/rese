1. package.json

No major changes except we add @vimeo/player as a dependency.

{
  "name": "vimeo_video",
  "version": "1.0.0",
  "main": "vimeo_video.webcomponent.ts",
  "private": true,
  "dependencies": {
    "@vimeo/player": "^2.24.0"
  }
}

2. vimeo_video.component.yml
'$schema': 'https://git.drupalcode.org/project/drupal/-/raw/HEAD/core/assets/schemas/v1/metadata.schema.json'
name: '@syngenta-web-components/components/vimeo_video'
status: stable
libraryOverrides:
  dependencies:
    - syn_webcomponents_core/core
    - syn_webcomponents_core_ui/core-ui/video
  css:
    component:
      ../../../dist/components/video/vimeo_video/vimeo_video.min.css: { minified: true }
props:
  type: object
  properties:
    attributes:
      type: Drupal\Core\Template\Attribute
    video_id:
      type: string
    thumbnail_src:
      type: ['string', 'null']
    title:
      type: string
    plays_inline:
      type: boolean

3. vimeo_video.iframe-player-api.ts

This is equivalent to your YouTube API wrapper but with Vimeo.

import Player from "@vimeo/player";
import type { VideoPlayerProviderFunctionType, VideoPlayerType } from "@internal/video/video-player-element";

const VimeoVideoPlayer: VideoPlayerProviderFunctionType = (elementId, _initializedCallback, startedCallback) => {
  const playerAPIReady = new Promise<Player>((resolve) => {
    const player = new Player(elementId, {
      id: elementId, // If elementId is a div with iframe, Vimeo handles it
      autoplay: false,
      playsinline: true,
      muted: true,
    });

    player.on("loaded", () => {
      console.info("Vimeo.Player ready()");
      resolve(player);
    });

    player.on("play", () => {
      if (typeof startedCallback === "function") {
        startedCallback.apply(player);
      }
    });
  });

  return {
    playVideo: () => {
      playerAPIReady.then((player) => player.play());
    },
    pauseVideo: () => {
      playerAPIReady.then((player) => player.pause());
    },
    isPlaying: () => {
      return new Promise<void>((resolve, reject) => {
        playerAPIReady.then(async (player) => {
          const state = await player.getPaused();
          if (!state) {
            resolve();
          } else {
            reject();
          }
        });
      });
    },
    destroy: () => {
      playerAPIReady.then((player) => player.destroy());
    },
  } as VideoPlayerType;
};

export default VimeoVideoPlayer;

4. vimeo_video.webcomponent.ts
import {
  html,
  customElement,
  property,
  Styled,
  GCMv2ConsentName,
  nothing
} from '@syngenta-web-components/core';

import styles from './vimeo_video.webcomponent.css';
import iconPlay from './vimeo_video.button.svg';

import VimeoVideoPlayer from "./vimeo_video.iframe-player-api";
import { VideoPlayerElement } from "@internal/video/video-player-element";

const REQUIRED_CONSENTS: GCMv2ConsentName[] = ['ad_storage', 'ad_personalization', 'ad_user_data'];

@customElement('swc-vimeo-video')
export class VimeoVideo extends Styled(
  styles,
  VideoPlayerElement(REQUIRED_CONSENTS, iconPlay, VimeoVideoPlayer)
) {
  @property({ type: Boolean, attribute: 'loop' }) public loop: boolean = false;

  getThumbnailSrc() {
    return this.thumbnailSrc || `https://vumbnail.com/${this.videoId}.jpg`; 
    // vumbnail.com gives Vimeo thumbnails
  }

  renderVideoIframe() {
    return this.videoId ? html`
        <iframe id="video"
          src="https://player.vimeo.com/video/${this.videoId}?muted=1&autoplay=0&loop=${this.loop ? 1 : 0}&playsinline=1"
          allow="autoplay; fullscreen; picture-in-picture"
          frameborder="0"
          allowfullscreen>
        </iframe>` : nothing;
  }
}

5. vimeo_video.twig
{% if video_id %}
  {% with { video_id, thumbnail_src, title, plays_inline, attributes } only %}
    <swc-vimeo-video
      video-id="{{ video_id }}"
      thumbnail-src="{{ thumbnail_src }}"
      title="{{ title }}"
      {{ (plays_inline ? 'plays-inline' : '')|raw }}
      {{ attributes }} >
      {{ 'Playing this video requires a&nbsp;<b>marketing</b>&nbsp;consent.'|t }}
    </swc-vimeo-video>
  {% endwith %}
{% endif %}

6. CSS (similar to YouTube)
swc-vimeo-video:not(:defined) {
  visibility: hidden;
}


üëâ With this, you‚Äôll have the same structure as your YouTube component, but working with Vimeo‚Äôs player API.

Would you like me to combine both YouTube & Vimeo into a single generic swc-video-player component (with a provider="youtube|vimeo" prop), or do you prefer separate components?


--------------------------------------------------------------------------------------------------------------------------------------------------------------------

<iframe
  src="https://player.vimeo.com/video/1120532219?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479"
  width="1760"
  height="1320"
  frameborder="0"
  allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share"
  referrerpolicy="strict-origin-when-cross-origin"
  title="Ochi-Showreel-fixed"
></iframe>

<div style="padding: 75% 0 0 0; position: relative">
  <iframe
    src="https://player.vimeo.com/video/1120536378?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479"
    frameborder="0"
    allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share"
    referrerpolicy="strict-origin-when-cross-origin"
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%"
    title="Refokus-Showreel-Fixed"
  ></iframe>
</div>  
<script src="https://player.vimeo.com/api/player.js"></script>

<div style="padding: 75% 0 0 0; position: relative">
  <iframe
    src="https://player.vimeo.com/video/1120536378?badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479"
    frameborder="0"
    allow="autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media; web-share"
    referrerpolicy="strict-origin-when-cross-origin"
    style="position: absolute; top: 0; left: 0; width: 100%; height: 100%"
    title="Refokus-Showreel-Fixed"
  ></iframe>
</div>
<script src="https://player.vimeo.com/api/player.js"></script>

--------------------------------------
----------------------------------------
üß± Folder structure

You‚Äôll have something like this (mirroring YouTube/Vimeo):

/video/local_video/
‚îÇ
‚îú‚îÄ‚îÄ local_video.webcomponent.ts
‚îú‚îÄ‚îÄ local_video.webcomponent.css
‚îú‚îÄ‚îÄ local_video.iframe-player-api.ts
‚îú‚îÄ‚îÄ local_video.button.svg
‚îú‚îÄ‚îÄ local_video.component.yml
‚îú‚îÄ‚îÄ local_video.twig
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ tailwind.config.js

1Ô∏è‚É£ local_video.iframe-player-api.ts

This file wraps the HTML5 <video> element with the same play/pause API your system expects.

import type { VideoPlayerProviderFunctionType, VideoPlayerType } from "@internal/video/video-player-element";

const LocalVideoPlayer: VideoPlayerProviderFunctionType = (elementId, _initializedCallback, startedCallback) => {
  const playerAPIReady = new Promise<HTMLVideoElement>((resolve) => {
    const videoElement = document.getElementById(elementId) as HTMLVideoElement;

    if (!videoElement) {
      console.error("Local video element not found.");
      return;
    }

    videoElement.addEventListener("loadeddata", () => {
      console.info("Local Video ready()");
      resolve(videoElement);
    });

    videoElement.addEventListener("play", () => {
      if (typeof startedCallback === "function") {
        startedCallback.apply(videoElement);
      }
    });
  });

  return {
    playVideo: () => {
      playerAPIReady.then((video) => video.play());
    },
    pauseVideo: () => {
      playerAPIReady.then((video) => video.pause());
    },
    isPlaying: () => {
      return new Promise<void>((resolve, reject) => {
        playerAPIReady.then((video) => {
          if (!video.paused && !video.ended) {
            resolve();
          } else {
            reject();
          }
        });
      });
    },
    destroy: () => {
      playerAPIReady.then((video) => {
        video.pause();
        video.removeAttribute("src");
        video.load(); // Release memory
      });
    },
  } as VideoPlayerType;
};

export default LocalVideoPlayer;

2Ô∏è‚É£ local_video.webcomponent.ts

Now, the web component that integrates it into your system.

import { html, customElement, property, Styled, GCMv2ConsentName, nothing } from '@syngenta-web-components/core';
import styles from './local_video.webcomponent.css';
import iconPlay from './local_video.button.svg';
import LocalVideoPlayer from "./local_video.iframe-player-api";
import { VideoPlayerElement } from "@internal/video/video-player-element";

const REQUIRED_CONSENTS: GCMv2ConsentName[] = ['ad_storage', 'ad_personalization', 'ad_user_data'];

@customElement('swc-local-video')
export class LocalVideo extends Styled(
  styles,
  VideoPlayerElement(REQUIRED_CONSENTS, iconPlay, LocalVideoPlayer)
) {
  @property({ type: Boolean, attribute: 'loop' }) public loop: boolean = false;
  @property({ type: Boolean, attribute: 'autoplay' }) public autoplay: boolean = false;
  @property({ type: Boolean, attribute: 'muted' }) public muted: boolean = true;
  @property({ type: String, attribute: 'src' }) public src: string = '';
  @property({ type: String, attribute: 'poster' }) public poster: string | null = null;

  getThumbnailSrc() {
    return this.poster || this.thumbnailSrc || ''; // Optional
  }

  renderVideoIframe() {
    return this.src ? html`
      <video id="video"
        src="${this.src}"
        ?autoplay=${this.autoplay}
        ?loop=${this.loop}
        ?muted=${this.muted}
        playsinline
        preload="metadata"
        poster="${this.getThumbnailSrc()}"
        controls
      ></video>
    ` : nothing;
  }
}

3Ô∏è‚É£ local_video.webcomponent.css

Basic styling (you can extend later):

@config 'tailwind.config.js';
@tailwind base;
@tailwind utilities;
@tailwind components;

:host {
  display: block;

  video {
    @apply tw-w-full tw-h-auto tw-rounded-2xl;
  }
}

4Ô∏è‚É£ local_video.twig

Integrate with Drupal like the other components:

{% if src %}
  {% with { src, poster, title, attributes } only %}
    <swc-local-video
      src="{{ src }}"
      poster="{{ poster }}"
      title="{{ title }}"
      {{ attributes }}>
      {{ 'Playing this video requires a <b>marketing</b> consent.'|t }}
    </swc-local-video>
  {% endwith %}
{% endif %}

5Ô∏è‚É£ local_video.component.yml
'$schema': 'https://git.drupalcode.org/project/drupal/-/raw/HEAD/core/assets/schemas/v1/metadata.schema.json'
name: '@syngenta-web-components/components/local_video'
status: stable
libraryOverrides:
  dependencies:
    - syn_webcomponents_core/core
    - syn_webcomponents_core_ui/core-ui/video
css:
  component:
    ../../../dist/components/video/local_video/local_video.min.css: { minified: true }
props:
  type: object
  properties:
    attributes:
      type: Drupal\Core\Template\Attribute
    src:
      type: string
    poster:
      type: ['string', 'null']
    title:
      type: string
    loop:
      type: boolean
    autoplay:
      type: boolean
    muted:
      type: boolean

6Ô∏è‚É£ package.json
{
  "name": "local_video",
  "version": "1.0.0",
  "description": "Local/HTML5 video web component",
  "main": "local_video.webcomponent.ts",
  "private": true
}

‚úÖ Usage Example
<swc-local-video
  src="https://cdn.mysite.com/videos/demo.mp4"
  poster="https://cdn.mysite.com/thumbnails/demo.jpg"
  loop
  autoplay
  muted>
</swc-local-video>

üí° How It Works (in short)
Step	Description
1	The web component <swc-local-video> renders a <video> element
2	The LocalVideoPlayer script connects to that <video> by id
3	It exposes a consistent API ‚Üí playVideo(), pauseVideo(), destroy()
4	This allows the parent system (VideoPlayerElement) to control it just like YouTube/Vimeo
5	Works both for local videos and CDN-hosted .mp4, .webm, etc.
